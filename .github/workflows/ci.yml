# name: My First CI Workflow
# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '18'

#       - name: Install Dependencies
#         run: npm install

#       - name: Run Tests
#         run: |
#           npm test
#           echo "No test yet"

#Cron job activity

# name: This is a cron job activity
# on:
#   push:
#     branches: [main, dev]
#   pull_request:
#     branches: [main]
#   schedule:
#     - cron: '0 0 * * *' # Runs every day at midnight UTC
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4
#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '18'
#       - name: Install Dependencies
#         run: npm install
#       - name: Run Tests
#         run: |
#           npm test || echo "No test yet"
#       - name: Showing API key
#         run: |
#           echo "API_KEY is ${{ secrets.MY_API_KEY }}"
#           echo "This is a test to show how to use secrets in GitHub Actions"

# MAtrix job activity

# name: This is a matrix job activity
# on:
#   push:
#     branches: [main, dev]
#   pull_request:
#     branches: [main]
#   workflow_dispatch:

# permissions:
#   actions: read
#   contents: read
#   security-events: write

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         node-version: [14, 16, 18] # Matrix for different Node.js versions

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: Set up Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ matrix.node-version }}

#       - name: Install Dependencies
#         run: npm install

#       - name: Run Tests
#         run: |
#           npm test || echo "No test yet"

#   security_scan:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Run Security Scan
#         run: |
#           echo "Running security scan for Node.js version ${{ matrix.node-version }}"
#           # Here you can add your security scanning commands, e.g., npm audit

#       - name: Initialise CodeQL
#         uses: github/codeql-action/init@v3
#         with:
#           languages: javascript

#       - name: Autobuild CodeQL
#         uses: github/codeql-action/autobuild@v3

#       - name: Perform CodeQL Analysis
#         uses: github/codeql-action/analyze@v3
#         with:
#           category: 'security'

#   deploy:
#     runs-on: ubuntu-latest
#     needs: security_scan
#     environment:
#       name: Production
#       url: https://example.com
#     steps:
#       - name: Code checkout
#         uses: actions/checkout@v4

#       - name: AWS CLI Setup
#         run: |
#           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#           unzip awscliv2.zip
#           sudo ./aws/install --update
      
#       - name: Verify AWS CLI installation
#         run: aws --version
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Deploy to AWS
#         run: echo "Deploying to AWS with Node.js version ${{ matrix.node-version }}"

#       - name: Delete S3 files
#         run: |
#           aws s3 sync . s3://my-test-vpc-flowlogs-bucket/ --delete
#           echo "S3 bucket deleted successfully"

# Adding staging environment

name: CI/CD Worklfow Staging to Rpoduction pipeline

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Node.js
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: |
          npm test || echo "No test yet"

  deploy_staging:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: staging
      url: https://staging.example.com
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up AWS CLI
        run: |
          echo "Setting up AWS CLI"
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          echo "AWS CLI setup completed"

      - name: Deploy to Staging
        run: |
          echo "Deploying to Staging environment"
          aws s3 sync . s3://my-staging-bucket/ --delete
          echo "Staging deployment completed"

  deploy_production:
    runs-on: ubuntu-latest
    needs: deploy_staging
    environment:
      name: Production
      url: https://example.com
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set up AWS CLI
        run: |
          echo "Setting up AWS CLI"
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          echo "AWS CLI setup completed"

      - name: Deploy to Production
        run: |
          echo "Deploying to Production environment"

  notify_slack:
    runs-on: ubuntu-latest
    needs: [deploy_staging, deploy_production]
    steps:
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": "Deployment completed successfully!",
              "attachments": [
                {
                  "title": "Staging Deployment",
                  "title_link": "${{ jobs.deploy_staging.outputs.url }}",
                  "color": "#36a64f"
                },
                {
                  "title": "Production Deployment",
                  "title_link": "${{ jobs.deploy_production.outputs.url }}",
                  "color": "#36a64f"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
